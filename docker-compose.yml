version: '3.8'

services:

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=db_ewen
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "db_prod" ]
      start_period: 15s
      interval: 20s
      timeout: 60s
      retries: 5

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8090:8080"
    environment:
      - ADMINER_DEFAULT_SYSTEM=postgres
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DEFAULT_USER=admin
      - ADMINER_DEFAULT_PASSWORD=root
      - ADMINER_DEFAULT_DATABASE=db_ewen

  flyway:
    build:
      context: .
      dockerfile: ./flyway.dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations/:/flyway/sql/
    command: -url=jdbc:postgresql://postgres:5432/db_ewen?allowPublicKeyRetrieval=true -schemas=db_ewen -user=admin -password=root -connectRetries=60 -validateMigrationNaming=true migrate

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  broker:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    container_name: broker
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 20s
      timeout: 60s
      retries: 5

  broker-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      broker:
        condition: service_healthy
    entrypoint:
      - bash
      - -c
      - |
        while ! bash -c "echo > /dev/tcp/broker/9092" 2> /dev/null; do sleep 1; done
      
        # blocks until kafka is reachable
        kafka-topics --bootstrap-server broker:9092 --list
        
        echo -e 'Creating kafka topics'
        kafka-topics --bootstrap-server broker:9092 --create --if-not-exists --topic ewenbouquet_planes --replication-factor 1 --partitions 1
        
        echo -e 'Successfully created the following topics:'
        kafka-topics --bootstrap-server broker:9092 --list

  planes-api:
    image: ewenbouquet/planes-api:${VERSION}
    ports:
      - "8080:8080"
    networks:
      - default
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - HEALTH_CHECK_HOST=0.0.0.0
      - HEALTH_CHECK_PORT=8081
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_KEYSPACE=db_ewen
      - DB_USER=admin
      - DB_PASSWORD=root
    entrypoint:
      - bash
      - -c
      - |
        while ! bash -c "echo > /dev/tcp/postgres/5432" 2> /dev/null; do sleep 1; done
        /opt/docker/bin/planes-api
    healthcheck:
      test: curl --fail 127.0.0.1:8081/health-check
      start_period: 30s
      interval: 15s
      timeout: 60s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully

  broker-producer:
    image: ewenbouquet/planes-broker-producer:${VERSION}
    networks:
      - default
    environment:
      - HEALTH_CHECK_HOST=0.0.0.0
      - HEALTH_CHECK_PORT=8081
      - BROKER_BOOTSTRAP_SERVERS=broker:9092
      - BROKER_TOPIC=ewenbouquet_planes
      - BROKER_SCHEDULER_INITIAL_DELAY=5 seconds
      - BROKER_SCHEDULER_REFRESH_DELAY=1 minute

    entrypoint:
      - bash
      - -c
      - |
        while ! bash -c "echo > /dev/tcp/broker/9092" 2> /dev/null; do sleep 1; done
        /opt/docker/bin/planes-broker-producer
    healthcheck:
      test: curl --fail 127.0.0.1:8081/health-check
      start_period: 30s
      interval: 15s
      timeout: 60s
      retries: 5
    depends_on:
      broker:
        condition: service_healthy
      broker-init:
        condition: service_completed_successfully

  broker-consumer:
    image: ewenbouquet/planes-broker-consumer:${VERSION}
    networks:
      - default
    environment:
      - HEALTH_CHECK_HOST=0.0.0.0
      - HEALTH_CHECK_PORT=8081
      - BROKER_BOOTSTRAP_SERVERS=broker:9092
      - BROKER_TOPIC=ewenbouquet_planes
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_KEYSPACE=db_ewen
      - DB_USER=admin
      - DB_PASSWORD=root
    entrypoint:
      - bash
      - -c
      - |
        while ! bash -c "echo > /dev/tcp/postgres/5432" 2> /dev/null; do sleep 1; done
        while ! bash -c "echo > /dev/tcp/broker/9092" 2> /dev/null; do sleep 1; done
        /opt/docker/bin/planes-broker-consumer
    healthcheck:
      test: curl --fail 127.0.0.1:8081/health-check
      start_period: 30s
      interval: 15s
      timeout: 60s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully
      broker:
        condition: service_healthy
      broker-init:
        condition: service_completed_successfully